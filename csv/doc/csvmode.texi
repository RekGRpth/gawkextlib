@node csvmode
@section CSV input mode
Lets gawk directly process comma-separated-values (CVS) data files.
@unnumberedsubsec USAGE

@example
@strong{@@include "csv"}             (or @strong{@@load "csv"}, see NOTE 1)
BEGIN @{ @strong{CSVMODE} = 1 @}
  @emph{... rules with @strong{$0}, @strong{$1}, ... @strong{$NF}, @strong{CSVRECORD}, @strong{csvfield(name)}, ...}
@end example

@unnumberedsubsec DESCRIPTION
The @emph{gawk-csv} extension can directly process CSV data files. Uses some specific variables:

@table @asis
@item @strong{CSVMODE}
@cindex CSVMODE
Setting @strong{CSVMODE=1} lets CSV formatted input data records to be automatically converted to regular awk records with fixed field separators, and delivered as @strong{$0}. And @strong{$1} .. @strong{$NF} are also set accordingly. Setting @strong{CSVMODE=0} disables the conversion, and input files are processed the usual way.

The conversion can be customized by some control variables:

@table @asis
@item @strong{CSVFS}
@cindex CSVFS
The resulting field separator, that temporarily overrides the @code{FS} and @code{OFS} predefined variables. If not set, a null char '\0' is used.
@item @strong{CSVCOMMA}
@cindex CSVCOMMA
The input CSV field delimiter. Default comma ','.
@item @strong{CSVQUOTE}
@cindex CSVQUOTE
The input CSV quoting character. Default double quote '"'.
@end table

@item @strong{CSVRECORD}
@cindex CSVRECORD
The original CSV input record.
@end table

If the CSV file has a header record, the fields can also be accessed by name:

@table @asis
@item @strong{csvfield(@emph{name} [, @emph{missing}])}
@cindex csvfield
Returns the named field of the current record. If there is no column named @emph{name}, then return @emph{missing}, or a null value if not given.
@end table

@code{CSVMODE}, @code{CSVFS}, @code{CSVCOMMA} and @code{CSVQUOTE} are checked only at @code{BEGINFILE} time. Changing them in the middle of a file processing takes no effect.

@code{CSVRECORD} is updated for each CSV input record.

The CSV input mode accepts fields with embedded newlines, tabs and other control characters, except null characters ('\0').
@unnumberedsubsec EXAMPLES
Extracts CSV records with some specific value in the second field:

@example
BEGIN @{CSVMODE = 1@}
$2=="some value" @{print CSVRECORD@}
@end example

Process CSV files with fields separated by semicolons instead of commas:

@example
BEGIN @{CSVMODE = 1; CSVFS = ";"@}
  ... processing rules ...
@end example

Prints a specific named field of every record:

@example
BEGIN @{CSVMODE = 1;@}
@{ print csvfield("City") @}
@end example

@unnumberedsubsec NOTES
@strong{(1)} The @code{@@include "csv"} directive enables all the described features. By using @code{@@load "csv"} instead, the record conversion is enabled, but @code{FS} and @code{OFS} are not overridden and the @code{csvfield()} function is not available.

In addition, if the user code has a @code{BEGINFILE} action that sets @code{CSV@emph{-mode}} variables depending on the current file, this action must appear before the @code{@@include "csv"} clause:

@example
BEGINFILE @{
    CSVMODE = (FILENAME ~ /\.csv$/)  # switch mode depending on the file type
@}
@@include "csv"
@end example

@unnumberedsubsec LIMITATIONS
Null characters are not allowed in fields. A null character terminates the record processing.