@node csvformat
@section CSV data generation
@unnumberedsubsec NAME
csv - facilities for creating Comma-Separated-Values (CSV) data with gawk.
@unnumberedsubsec USAGE

@example
@strong{@@include "csv"}
...
@emph{result} = @strong{csvcompose}(@emph{afield}, @emph{option}...)
@emph{result} = @strong{csvformat}(@emph{record}, @emph{option}...)
@emph{result} = @strong{csvquote}(@emph{field}, @emph{option}...)
@end example

@unnumberedsubsec DESCRIPTION
The @code{csv.awk} library provides control variables and functions for composing CSV data records and fields:

@table @asis
@item @strong{CSVFS}
@cindex CSVFS
The expected field separator in the clean text record to be formatted. Default the null character '\0'.
@item @strong{CSVCOMMA}
@cindex CSVCOMMA
The resulting CSV field delimiter. Default comma ','.
@item @strong{CSVQUOTE}
@cindex CSVQUOTE
The resulting CSV quoting character. Default double quote '"'.
@item @strong{csvcompose(@emph{afield} [, @emph{comma} [, @emph{quote}]])}
@cindex csvcompose
Returns a CSV formatted string by composing the values in the @emph{afield} array. The arguments are as follows:

@table @asis
@item @strong{afield}
An array of field values, indexed from 1 to @emph{N}.
@item @strong{comma}
Optional. The resulting CSV field delimiter. Default @code{CSVCOMMA}.
@item @strong{quote}
Optional. The resulting CSV quoting character. Default @code{CSVQUOTE}.
@end table

@item @strong{csvformat(@emph{record}, [@emph{fs} [, @emph{comma} [, @emph{quote}]]])}
@cindex csvformat
Returns a CSV formatted string by composing the fields in the @emph{record} string. The arguments are as follows:

@table @asis
@item @strong{record}
A string record with fields delimited by @emph{fs}.
@item @strong{fs}
Optional. The actual field separator in @emph{record}. Default @code{CSVFS}.
@item @strong{comma}
Optional. The desired CSV field delimiter. Default @code{CSVCOMMA}.
@item @strong{quote}
Optional. The desired CSV quoting character. Default @code{CSVQUOTE}.
@end table

@item @strong{csvquote(@emph{field} [, @emph{comma} [, @emph{quote}]])}
@cindex csvquote
Returns a CSV formatted string by escaping the required characters in the @emph{field} string. The arguments are as follows:

@table @asis
@item @strong{field}
A single field clean text string.
@item @strong{comma}
Optional. The desired CSV field delimiter. Default @code{CSVCOMMA}.
@item @strong{quote}
Optional. The desired CSV quoting character. Default @code{CSVQUOTE}.
@end table

@end table

@unnumberedsubsec EXAMPLES
Explicit CSV composition:

@example
f[1] = "007"
f[2] = "Bond, James"
f[3] = "United Kingdom"
result = csvcompose(f)  # -> '007,"Bond, James",United Kingdom'
result = csvcompose(f, ";")  # -> '007;Bond, James;United Kingdom'

record = "007/Bond, James/United Kingdom"
result = csvformat(record, "/")  # -> '007,"Bond, James",United Kingdom'
result = csvformat(record, "/", ";")  # -> '007;Bond, James;United Kingdom'
@end example

@unnumberedsubsec NOTES
The @emph{csv} library automatically loads the CSV extension.
@unnumberedsubsec LIMITATIONS
