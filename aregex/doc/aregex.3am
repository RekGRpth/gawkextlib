.\" Automatically generated by Pandoc 2.3.1
.\"
.TH "AREGEX" "3am" "Nov 24 2018" "Free Software Foundation" "GNU Awk Extension Modules"
.hy
.SH NAME
.PP
aregex \- approximate (fuzzy) string matching with regular expressions
.SH SYNOPSIS
.PP
\@load \f[C]"aregex"\f[]
.PP
success = amatch(str, regex [, cost|costs [, submatches]])
.SH DESCRIPTION
.PP
The TRE library (ref.
below) provides approximate matching regex capabilities.
A match between two strings that differ in some number of characters
will be found when the cost of character insertions, deletions and
substitutions does not exceed some specified maximum cost.
For example,
.IP
.nf
\f[C]
"abcdef"
"abcxdef"\ \ #\ one\ insertion
"abdef"\ \ \ \ #\ one\ deletion
"abxdef"\ \ \ #\ one\ substitution
\f[]
.fi
.PP
The cost of the match (the Levenshtein distance between strings) can be
reported.
This Gawk extension provides an interface with the
\f[I]tre_regaexec()\f[] function in the TRE library, permitting the
setting of all possible parameters for that function, and returning all
possible information about a match.
.SS Function summary
.PP
A single function, \f[B]amatch()\f[] is provided, modeled on the Gawk
\f[I]match()\f[] function:
.PP
\f[B]amatch(\f[] \f[I]str\f[] \f[B],\f[] \f[I]regex\f[] \f[B][,\f[]
\f[I]cost\f[]|\f[I]costs\f[] \f[B][,\f[] \f[I]submatches\f[] \f[B]]\f[]
\f[B]]\f[] \f[B])\f[]
.PP
This function takes two mandatory string arguments, and two optional
arguments.
\f[I]regex\f[] is an \f[B]extended\f[] regular expression (or plain
string) to be matched against string \f[I]str\f[].
Note that the regular expression \f[I]regex\f[] is bounded by
double\-quotes, not by the usual Gawk slashes.
.SS Setting approximate match costs
.PP
With only two arguments, the default maximum cost for the approximate
match is set to 5, and other costs are set as below.
The maximum cost may also be set by the user via an optional third
parameter: either an integer (\f[I]cost\f[]), or a member of a
one\-dimensional array (\f[I]costs\f[]) indexed by \f[C]"max_cost"\f[].
Setting maximum cost to 0 forces an exact regular expression match, as
with Gawk's \f[I]match()\f[].
Other members of the \f[I]costs\f[] array with appropriate index values
will set the parameters of the \f[I]regaparams_t\f[] structure used by
\f[I]tre_regaexec()\f[]:
.IP
.nf
\f[C]
Array\ index\ \ \ Parameter\ \ \ \ Def\ val\ \ Meaning
============\ \ ===========\ \ =======\ \ =====================\ \ \ \ \ 
"cost_ins"\ \ \ \ .cost_ins\ \ \ \ \ \ \ 1\ \ \ \ \ Cost\ of\ one\ insertion
"cost_del"\ \ \ \ .cost_del\ \ \ \ \ \ \ 1\ \ \ \ \ Cost\ of\ one\ deletion
"cost_subst"\ \ .cost_subst\ \ \ \ \ 1\ \ \ \ \ Cost\ of\ one\ substitution
"max_cost"\ \ \ \ .max_cost\ \ \ \ \ \ \ 5\ \ \ \ \ Max.\ cost
"max_del"\ \ \ \ \ .max_del\ \ \ \ \ \ \ \ 5\ \ \ \ \ Max.\ number\ of\ deletions
"max_ins"\ \ \ \ \ .max_ins\ \ \ \ \ \ \ \ 5\ \ \ \ \ Max.\ number\ of\ insertions
"max_subst"\ \ \ .max_subst\ \ \ \ \ \ 5\ \ \ \ \ Max.\ number\ of\ substitutions
"max_err"\ \ \ \ \ .max_err\ \ \ \ \ \ \ \ 5\ \ \ \ \ Max.\ number\ of\ ins+del+subst
\f[]
.fi
.PP
If the array \f[I]costs\f[] is provided but contains none of the above
indexes, the default values are used.
.SS Return value
.PP
The \f[B]amatch()\f[] function returns 1 on a successful match and 0 on
a failure to match.
.SS Obtaining match summary data
.PP
If a third array argument is provided to \f[B]amatch()\f[], and a match
was successful, information about the match is return via (clearing and)
filling members of the \f[I]costs\f[] array with these indexes:
.IP
.nf
\f[C]
Array\ index\ \ \ Meaning
============\ \ ==============================================
"cost"\ \ \ \ \ \ \ \ Total\ cost\ of\ the\ match\ (Levenshtein\ distance)\ \ 
"num_ins"\ \ \ \ \ Total\ number\ of\ insertions
"num_del"\ \ \ \ \ Total\ number\ of\ deletions
"num_subst"\ \ \ Total\ number\ of\ substitutions
\f[]
.fi
.SS Obtaining parenthetical submatches
.PP
If an array (or empty Gawk variable symbol) is provided as the
\f[B]fourth argument\f[] , and a match is successful, the array will be
cleared and filled with submatches corresponding to the parenthetical
sub\-expression in \f[I]regex\f[], with indexes \f[I]1\&...n\f[], up to
a maximum of 20.
The array member indexed by \f[I]0\f[] will be the portion of
\f[I]str\f[] matched by the whole of \f[I]re\f[].
.PP
\f[B]A note on bytes and characters\f[]: While the \f[B]amatch()\f[]
function is roughly equivalent to the Gawk \f[I]match()\f[] function,
submatches are not returned as in \f[I]match()\f[] via
\f[I][i,\[lq]start\[rq]]\f[] position and \f[I][i,\[lq]length\[rq]]\f[]
(see Gawk \f[C]man\f[] page).
Instead only the literal substring for each parenthetical match is
given.
Gawk is multibyte aware, and \f[I]match()\f[] works in terms of
characters, not bytes, but TRE is byte\-based, not character\-based.
Using the \f[I]wchar_t\f[] versions of TRE functions cannot help if the
input is a mix of single and multi\-byte characters.
A simple Gawk routine must be used on the output array
(\f[I]submatches\f[]), if positions and lengths of the substrings are
needed.
E.g.:
.IP
.nf
\f[C]
print\ "i",\ "substring",\ "posn",\ "length"
p\ =\ 1
for\ (i\ =\ 1;\ i\ <\ length(submatches);\ i++)\ {
\ \ idx\ =\ index(substr(str,\ p),\ submatches[i])
\ \ len\ =\ length(out[i])
\ \ print\ i,\ submatches[i],\ idx+p\-1,\ len
\ \ p\ =\ p\ +\ idx\ +\ len
}
\f[]
.fi
.SH EXAMPLE
.IP
.nf
\f[C]
\@load\ "aregex"
BEGIN\ {
\ \ str\ =\ "abcdễfbc"
\ \ regex\ =\ "^a(bc)d(ễ)(f)$"
\ \ costs["max_cost"]\ =\ 6
\ \ costs["cost_ins"]\ =\ 2
\ \ if\ (amatch(str,\ regex,\ costs,\ submatches))
\ \ \ \ print\ costs["cost"],\ submatches[1]
}\ \ \ \ 
\f[]
.fi
.SH SEE ALSO
.PP
The Gawk extension lib: https://sourceforge.net/projects/gawkextlib/ TRE
library: https://laurikari.net/tre/
.SH AUTHORS
.PP
Cam Webb <cw@camwebb.info>, \@laurikari for the TRE library, the
\f[I]gawkextlib\f[] authors
.SH COPYING PERMISSIONS
.PP
Copyright © 2018, the Free Software Foundation, Inc.
.PP
Copyright © 2018, Campbell O.
Webb
.PP
Permission is granted to make and distribute verbatim copies of this
manual page provided the copyright notice and this permission notice are
preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual page under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this manual
page into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a trans‐
lation approved by the Foundation.
